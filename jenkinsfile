pipeline {
    agent any
    tools {
        maven 'M2_HOME' 
    }
    environment {
       
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.1.200:8081"
        NEXUS_REPOSITORY = "jenkins-repo"
        NEXUS_CREDENTIAL_ID = "nexusID"
      
    }
    stages {
        stage("Fetching Code From Repository") {
            steps {
                script {
                    git branch: 'backendMohaned', url: 'https://github.com/mohanedbenmansour/TP-Achat-CodeMages.git';
                    sh "ls"
                }
            }
        }


       stage('Building Project'){
            steps{
                script{
                        sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -DskipTests'
                        
                }
            }
        }

        stage("Runing Tests with Mockito and Jacoco") {
               steps{
                    sh 'mvn test'
                    jacoco()
                }
        }

        stage("Quality Check with SonarQube") {
            steps{
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=0000 -DskipTests'
            }
        }
        
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "* File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        
    
        
    }
}
